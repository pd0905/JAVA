package Threadtest;
/*
 * zai同步过多的情况下会产生死锁
 * td1 线程获得A锁，在没有释放锁的时候将又申请获得B锁
 * td2 线程获得B锁，在没有释放锁的时候将又申请获得A锁
 *      闭环发生，产生死锁，导致程序没办法运行下去----------->较少锁的范围，早点释放锁，能够避免死锁
 */
public class DeadLockDemo01{
	public static void main(String[] args) {
		   Thread td1 = new Thread(new Runnable() { //使用匿名类
	            public void run() {
	                DeadLockDemo01.methond01();
	            }
	        });
		   Thread td2 = new Thread(new Runnable() {
			   public void run() {
				   DeadLockDemo01.methond02();
			   }
		   });
		   
		   td1.start();
		   td2.start();
		
	}	
	public static void methond01() {
		/*synchronized(String.class) {
			try {
				System.out.println(Thread.currentThread().getName()+"获取到String.calss");
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		synchronized(Integer.class) {
			
		}
		System.out.println(Thread.currentThread().getName()+"获取到Intgeter.class");*/
		synchronized (String.class) {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("线程a尝试获取integer.class");
            synchronized (Integer.class) {

            }
            System.out.println("线程a已经获取integer.class"); //这条语句没有执行

        }
	}
	
	public static void methond02() {
		/*synchronized(Integer.class) {
			try {
				System.out.println(Thread.currentThread().getName()+"获取到Integer.calss");
				Thread.sleep(5000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		synchronized(String.class) {
			
		}
		System.out.println(Thread.currentThread().getName()+"获取到String.class");*/
		synchronized (Integer.class) {
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("线程b尝试获取String.class");
            synchronized (String.class) {

            }
            System.out.println("线程b已经获取String.class"); //这条语句没有执行
        }
		
	}
}
