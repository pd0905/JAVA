java stack 的使用：
/**
* 实现 括号匹配 
* 给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效
*有效字符串需满足
*左括号必须用相同类型的右括号闭合
*左括号必须以正确的顺序闭合
*注意空字符串可被认为是有效字符串
*/
class Solution {
    public boolean isValid(String s) {
        //  Stack<Character>stack = new Stack<Character>();
        //  for(char c: s.toCharArray()){     //遍历字符串
        //     if(c=='(')
        //         stack.push(')');
        //     else if(c=='[')
        //         stack.push(']');
        //     else if(c=='{')
        //         stack.push('}');
        //     else if(stack.isEmpty()||c!=stack.pop())    //判断字符串是否为空
        //         return false;
        // }
        //    return stack.isEmpty();


        if (s.length() % 2 == 1) // 奇数个字符的字符串 显然无法完成括号匹配
            return false;
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char theChar = s.charAt(i);
            if (theChar == '(' || theChar == '{' || theChar == '[')
                stack.push(theChar);
            else {
                if (stack.empty()) // 栈中已无左括号，此时字符为右括号，无法匹配。
                    return false;
                char preChar = stack.peek();
                if ((preChar == '{' && theChar == '}') || (preChar == '(' && theChar == ')') || (preChar == '[' && theChar == ']'))
                    stack.pop();
                else return false;
            }
        }
        return stack.empty();
    }
}

使用stack实现括号匹配： 
"(),{},[]"  true 
"{]" false
栈   特性 先进后出： 
常用方法：
push（） -》入栈
peek（）-》去除栈顶元素但是不删除
pop（）-》取出栈顶颜色并删除
isEmpty（）-》判断栈是否为空

