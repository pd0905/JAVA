package Threadtest;
/*
 * 设置静态代理实现
 * 1.创建真实角色
 * 2.创建代理角色
 * 3.真实校色和代理校色拥有相同的引用
 * 4.二者实现相同的接口--->二者必须要实现相同的代理
 */
public class StaticProxy {
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		//创建真实角色
	    /*Marry you =new You();
		//创建代理角色 +真实角色的引用
		WeddingCompany company =new WeddingCompany(you);
		//执行任务
		company.marry(); */
		Statictest you = new Statictest();
		WeddingCompany company = new WeddingCompany(you);
		company.marry();
	}
}
class Statictest implements Marry{
	public void function() {
		System.out.println("function");
	}

	@Override
	public void marry() {
		// TODO Auto-generated method stub
		System.out.println("wo and 嫦娥结婚了....");
	}
}
//接口
interface Marry{
	public abstract void marry();
}
//真实角色
class You implements Marry{

	@Override
	public void marry() {
		System.out.println("you and  嫦娥结婚了....");
	}
	
}
//代理角色
class WeddingCompany implements Marry{
	private Marry you;
	public WeddingCompany() {
	}
	
	public WeddingCompany(Marry you) {
		this.you = you;
	}
	private void before(){
		System.out.println("布置猪窝....");
		
	}
	private void after(){
		System.out.println("闹玉兔....");
	}
	@Override
	public void marry() {
		before();
		you.marry();
		after();
	}
	
}


